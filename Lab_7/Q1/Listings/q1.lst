A51 MACRO ASSEMBLER  Q1                                                                   03/11/2022 02:01:36 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\q1.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE q1.a51 SET(SMALL) DEBUG PRINT(.\Listings\q1.lst) OBJECT(.\Objects\q1.ob
                      j) EP

LOC  OBJ            LINE     SOURCE

                       1     ; This subroutine writes characters on the LCD
  00A0                 2     LCD_data equ P2    ;LCD Data port
  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select
  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write
  0082                 5     LCD_en   equ P0.2  ;LCD Enable
                       6             
0000                   7     org 0H
0000 020030            8     ljmp main
                       9     
000B                  10     org 0BH                                                                 ;interrupt vector f
                             or timer0
000B 0200F3           11     ljmp timer_jump                                                 ;jump to interrupt service 
                             routine for timer0
                      12     
0030                  13     org 30H
0030                  14     main:
0030 758901           15             mov TMOD, #01H                                          ;set timer0 in mode 1
0033 75900F           16             mov P1, #0FH                                            ;configure switches as input
0036 516B             17             call delay                                                      ;initial delay for 
                             lcd power up
0038 516B             18             call delay
003A 5100             19             call lcd_init                                           ;initialise LCD
003C 516B             20             call delay
003E 516B             21             call delay
0040                  22             forever:
0040 7800             23                     mov r0, #0H                                     ;to hold the number of time
                             s timer overflows
0042 758901           24                     mov TMOD, #01H                                  ;set timer0 in mode 1
0045 7485             25                     mov a,#85h                                              ;put cursor on firs
                             t row, fifth column
0047 513D             26                     call lcd_command                                ;send command to LCD
0049 516B             27                     call delay
004B 900300           28                     mov dptr,#my_string1            
004E 515D             29                     call lcd_sendstring                     ;call text strings sending routine
0050 516B             30                     call delay
0052 74C3             31                     mov a,#0C3h                                             ;Put cursor on seco
                             nd row,third column
0054 513D             32                     call lcd_command
0056 516B             33                     call delay
0058 90030B           34                     mov dptr,#my_string2
005B 515D             35                     call lcd_sendstring                     ;call text strings sending routine
005D 11FF             36                     call delay_1s
005F 11FF             37                     call delay_1s                                   ;wait 2s
0061 D294             38                     setb P1.4                                               ;turnon LED
                      39                                                                                     ;setup time
                             r0 in interrupt mode
0063 D2AF             40                     setb EA
0065 D2A9             41                     setb ET0
0067 758C00           42                     mov TH0, #0H
006A 758A00           43                     mov TL0, #0H
006D D28C             44                     setb TR0                                                ;start counting
006F                  45                     waitup:
006F 3090FD           46                             jnb P1.0, waitup                        ;wait until the switch is p
                             ressed
0072                  47                     waspressed:
0072 A98C             48                             mov r1, TH0
0074 AA8A             49                             mov r2, TL0
A51 MACRO ASSEMBLER  Q1                                                                   03/11/2022 02:01:36 PAGE     2

0076 7485             50                             mov a,#85h                                      ;put cursor on firs
                             t row, fifth column
0078 513D             51                             call lcd_command                        ;send command to LCD
007A 516B             52                             call delay
007C 900318           53                             mov dptr,#my_string3            
007F 515D             54                             call lcd_sendstring             ;call text strings sending routine
0081 516B             55                             call delay
0083 74C3             56                             mov a,#0C3h                                     ;Put cursor on seco
                             nd row,third column
0085 513D             57                             call lcd_command
0087 516B             58                             call delay
0089 900326           59                             mov dptr,#my_string4
008C 515D             60                             call lcd_sendstring             ;call text strings sending routine
008E 516B             61                             call delay
0090 8831             62                             mov 31H, r0
0092 11C8             63                             call ascii_finder
0094 E560             64                             mov a,60H
0096 514C             65                             acall lcd_senddata
0098 E561             66                             mov a,61H
009A 514C             67                             acall lcd_senddata
009C 7420             68                             mov a,#20H                                      ;space
009E 514C             69                             acall lcd_senddata
00A0 8931             70                             mov 31H, r1
00A2 11C8             71                             call ascii_finder
00A4 E560             72                             mov a,60H
00A6 514C             73                             acall lcd_senddata
00A8 E561             74                             mov a,61H
00AA 514C             75                             acall lcd_senddata
00AC 8A31             76                             mov 31H, r2
00AE 11C8             77                             call ascii_finder
00B0 E560             78                             mov a,60H
00B2 514C             79                             acall lcd_senddata
00B4 E561             80                             mov a,61H
00B6 514C             81                             acall lcd_senddata
00B8 C2AF             82                             clr EA                                          ;remove interrupt m
                             ode from timer0
00BA C2A9             83                             clr ET0
00BC 11FF             84                             call delay_1s
00BE 11FF             85                             call delay_1s
00C0 11FF             86                             call delay_1s
00C2 11FF             87                             call delay_1s
00C4 11FF             88                             call delay_1s
00C6 0140             89                             jmp forever
                      90     
00C8                  91     ascii_finder:
00C8 C001             92             push 1
00CA C002             93             push 2
00CC A931             94             mov r1, 31H
00CE E9               95             mov a, r1
00CF 75F010           96             mov b, #10H
00D2 84               97             div ab; divide by 10H to get both digits 
00D3 FA               98             mov r2, a; the first digit
00D4 ABF0             99             mov r3, b; the second digit
00D6 EA              100             mov a, r2
00D7 11E5            101             call check_the_val
00D9 F560            102             mov 60H, a; move the accumulator to 60H
00DB EB              103             mov a, r3
00DC 11E5            104             call check_the_val
00DE F561            105             mov 61H, a; move the accumulator to 61H
00E0 D002            106             pop 2
00E2 D001            107             pop 1
00E4 22              108             ret
                     109     
00E5                 110     check_the_val:
00E5 B40903          111                     cjne a,#9H,unequal; check if equal to 9
00E8 2430            112                     add a,#30H
A51 MACRO ASSEMBLER  Q1                                                                   03/11/2022 02:01:36 PAGE     3

00EA 22              113                     ret
00EB                 114                     unequal:
00EB 4003            115                             jc smaller; check if smaller than 9
                     116                             ;greater than 9 case
                     117                             ;add 37H to get ASCII for A-F
00ED 2437            118                             add a, #37H
00EF 22              119                             ret
00F0                 120                             smaller:
                     121                                     ;add 30H to get ASCII for 0-9
00F0 2430            122                                     add a, #30H
00F2 22              123                                     ret
                     124     
00F3                 125     timer_jump:
00F3 08              126             inc R0                          ;the timer has overflown so increment R0
00F4 758C00          127             mov TH0,#0H
00F7 758A00          128             mov TL0,#0H
00FA D28C            129             setb TR0
00FC D2A9            130             setb ET0
00FE 32              131             reti
                     132             
00FF                 133     delay_1s:                               ;timer will take 40*25ms = 1s
00FF 7A28            134             mov r2, #40
0101                 135             repeat:
0101 3106            136                     call delay_25ms
0103 DAFC            137                     djnz r2, repeat
0105 22              138                     ret
                     139     
0106                 140     delay_25ms:                             ;timer will take 50k/2MHz = 25,000us = 25ms
0106 758C3C          141             mov TH0, #3CH           ;move the values to TH, TL register 
0109 758AB0          142             mov TL0, #0B0H          ;to set TH,TL = -C350 (hex) - 50000 states
010C D28C            143             setb TR0                        ;setup timer
010E                 144             loopsie:                                ;polling
010E 208D02          145                     jb TF0, myexit  ;exit if flag bit is 1
0111 80FB            146                     jmp loopsie
0113                 147             myexit:
0113 C28D            148                     clr TF0                 ;clear flag bit
0115 22              149                     ret
                     150     
0200                 151     org 200H
                     152     ;------------------------LCD Initialisation routine----------------------------------------
                             ------------
0200                 153     lcd_init:
0200 75A038          154              mov   LCD_data,#38H  ;Function set: 2 Line, 8-bit, 5x7 dots
0203 C280            155              clr   LCD_rs         ;Selected command register
0205 C281            156              clr   LCD_rw         ;We are writing in instruction register
0207 D282            157              setb  LCD_en         ;Enable H->L
0209 516B            158                      acall delay
020B C282            159              clr   LCD_en
020D 516B            160                  acall delay
                     161     
020F 75A00C          162              mov   LCD_data,#0CH  ;Display on, Curson off
0212 C280            163              clr   LCD_rs         ;Selected instruction register
0214 C281            164              clr   LCD_rw         ;We are writing in instruction register
0216 D282            165              setb  LCD_en         ;Enable H->L
0218 516B            166                      acall delay
021A C282            167              clr   LCD_en
                     168              
021C 516B            169                      acall delay
021E 75A001          170              mov   LCD_data,#01H  ;Clear LCD
0221 C280            171              clr   LCD_rs         ;Selected command register
0223 C281            172              clr   LCD_rw         ;We are writing in instruction register
0225 D282            173              setb  LCD_en         ;Enable H->L
0227 516B            174                      acall delay
0229 C282            175              clr   LCD_en
                     176              
022B 516B            177                      acall delay
A51 MACRO ASSEMBLER  Q1                                                                   03/11/2022 02:01:36 PAGE     4

                     178     
022D 75A006          179              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift
0230 C280            180              clr   LCD_rs         ;Selected command register
0232 C281            181              clr   LCD_rw         ;We are writing in instruction register
0234 D282            182              setb  LCD_en         ;Enable H->L
0236 516B            183                      acall delay
0238 C282            184              clr   LCD_en
                     185     
023A 516B            186                      acall delay
                     187              
023C 22              188              ret                  ;Return from routine
                     189     ;-----------------------command sending routine-------------------------------------
023D                 190      lcd_command:
023D F5A0            191              mov   LCD_data,A     ;Move the command to LCD port
023F C280            192              clr   LCD_rs         ;Selected command register
0241 C281            193              clr   LCD_rw         ;We are writing in instruction register
0243 D282            194              setb  LCD_en         ;Enable H->L
0245 516B            195                      acall delay
0247 C282            196              clr   LCD_en
0249 516B            197                      acall delay
                     198         
024B 22              199              ret  
                     200     ;-----------------------data sending routine-------------------------------------          
                                       
024C                 201      lcd_senddata:
024C F5A0            202              mov   LCD_data,A     ;Move the command to LCD port
024E D280            203              setb  LCD_rs         ;Selected data register
0250 C281            204              clr   LCD_rw         ;We are writing
0252 D282            205              setb  LCD_en         ;Enable H->L
0254 516B            206                      acall delay
0256 C282            207              clr   LCD_en
0258 516B            208              acall delay
025A 516B            209                      acall delay
025C 22              210              ret                  ;Return from busy routine
                     211     
                     212     ;-----------------------text strings sending routine-------------------------------------
025D                 213     lcd_sendstring:
025D C0E0            214             push 0e0h
025F                 215             lcd_sendstring_loop:
025F E4              216                      clr   a                                        ;clear Accumulator for any 
                             previous data
0260 93              217                      movc  a,@a+dptr                        ;load the first character in accumu
                             lator
0261 6005            218                      jz    exit                             ;go to exit if zero
0263 514C            219                      acall lcd_senddata                     ;send first char
0265 A3              220                      inc   dptr                             ;increment data pointer
0266 80F7            221                      sjmp  LCD_sendstring_loop      ;jump back to send the next character
0268 D0E0            222     exit:    pop 0e0h
026A 22              223              ret                                            ;End of routine
                     224     
                     225     ;----------------------delay routine-----------------------------------------------------
026B C000            226     delay:   push 0
026D C001            227              push 1
026F 7801            228              mov r0,#1
0271 79FF            229     loop2:   mov r1,#255
0273 D9FE            230              loop1:  djnz r1, loop1
0275 D8FA            231              djnz r0, loop2
0277 D001            232              pop 1
0279 D000            233              pop 0 
027B 22              234              ret
                     235     ;--------------------------------------------------------
0300                 236     org 300H
0300                 237     my_string1:
0300 546F6767        238     DB   "Toggle SW1", 00H
0304 6C652053                
0308 573100                  
A51 MACRO ASSEMBLER  Q1                                                                   03/11/2022 02:01:36 PAGE     5

                     239             
030B                 240     my_string2:
030B 6966204C        241     DB   "if LED glows", 00H
030F 45442067                
0313 6C6F7773                
0317 00                      
                     242             
0318                 243     my_string3:
0318 52656163        244     DB   "Reaction Time", 00H
031C 74696F6E                
0320 2054696D                
0324 6500                    
                     245             
0326                 246     my_string4:
0326 436F756E        247     DB      "Count is ", 00H        
032A 74206973                
032E 2000                    
                     248             
                     249     end     
                             
                                     
A51 MACRO ASSEMBLER  Q1                                                                   03/11/2022 02:01:36 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

ASCII_FINDER. . . .  C ADDR   00C8H   A   
B . . . . . . . . .  D ADDR   00F0H   A   
CHECK_THE_VAL . . .  C ADDR   00E5H   A   
DELAY . . . . . . .  C ADDR   026BH   A   
DELAY_1S. . . . . .  C ADDR   00FFH   A   
DELAY_25MS. . . . .  C ADDR   0106H   A   
EA. . . . . . . . .  B ADDR   00A8H.7 A   
ET0 . . . . . . . .  B ADDR   00A8H.1 A   
EXIT. . . . . . . .  C ADDR   0268H   A   
FOREVER . . . . . .  C ADDR   0040H   A   
LCD_COMMAND . . . .  C ADDR   023DH   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   0200H   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   024CH   A   
LCD_SENDSTRING. . .  C ADDR   025DH   A   
LCD_SENDSTRING_LOOP  C ADDR   025FH   A   
LOOP1 . . . . . . .  C ADDR   0273H   A   
LOOP2 . . . . . . .  C ADDR   0271H   A   
LOOPSIE . . . . . .  C ADDR   010EH   A   
MAIN. . . . . . . .  C ADDR   0030H   A   
MYEXIT. . . . . . .  C ADDR   0113H   A   
MY_STRING1. . . . .  C ADDR   0300H   A   
MY_STRING2. . . . .  C ADDR   030BH   A   
MY_STRING3. . . . .  C ADDR   0318H   A   
MY_STRING4. . . . .  C ADDR   0326H   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
REPEAT. . . . . . .  C ADDR   0101H   A   
SMALLER . . . . . .  C ADDR   00F0H   A   
TF0 . . . . . . . .  B ADDR   0088H.5 A   
TH0 . . . . . . . .  D ADDR   008CH   A   
TIMER_JUMP. . . . .  C ADDR   00F3H   A   
TL0 . . . . . . . .  D ADDR   008AH   A   
TMOD. . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . .  B ADDR   0088H.4 A   
UNEQUAL . . . . . .  C ADDR   00EBH   A   
WAITUP. . . . . . .  C ADDR   006FH   A   
WASPRESSED. . . . .  C ADDR   0072H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
