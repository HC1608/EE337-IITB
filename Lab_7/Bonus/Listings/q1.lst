A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\q1.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE q1.a51 SET(SMALL) DEBUG PRINT(.\Listings\q1.lst) OBJECT(.\Objects\q1.ob
                      j) EP

LOC  OBJ            LINE     SOURCE

                       1     ; This subroutine writes characters on the LCD
  00A0                 2     LCD_data equ P2    ;LCD Data port
  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select
  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write
  0082                 5     LCD_en   equ P0.2  ;LCD Enable
                       6             
0000                   7     org 0H
0000 020030            8     ljmp main
                       9     
000B                  10     org 0BH                                                                 ;interrupt vector f
                             or timer0
000B 0200D9           11     ljmp timer_jump                                                 ;jump to interrupt service 
                             routine for timer0
                      12     
0030                  13     org 30H
0030                  14     main:
0030 758901           15             mov TMOD, #01H                                          ;set timer0 in mode 1
0033 75900F           16             mov P1, #0FH                                            ;configure switches as input
0036                  17             forever:
0036 516B             18                     call delay                                              ;initial delay for 
                             lcd power up
0038 516B             19                     call delay
003A 5100             20                     call lcd_init                                   ;initialise LCD
003C 516B             21                     call delay
003E 516B             22                     call delay
0040 7800             23                     mov r0, #0H                                     ;to hold the number of time
                             s timer overflows
0042 758901           24                     mov TMOD, #01H                                  ;set timer0 in mode 1
0045 7483             25                     mov a,#83H                                              ;put cursor on firs
                             t row, third column
0047 513D             26                     call lcd_command                                ;send command to LCD
0049 516B             27                     call delay
004B 900300           28                     mov dptr,#my_string1            
004E 515D             29                     call lcd_sendstring                     ;call text strings sending routine
0050 516B             30                     call delay
0052 74C3             31                     mov a,#0C3H                                             ;Put cursor on seco
                             nd row,third column
0054 513D             32                     call lcd_command
0056 516B             33                     call delay
0058 90030B           34                     mov dptr,#my_string2
005B 515D             35                     call lcd_sendstring                     ;call text strings sending routine
005D 11E5             36                     call delay_1s
005F 11E5             37                     call delay_1s                                   ;wait 2s
0061 D294             38                     setb P1.4                                               ;turnon LED
                      39                                                                                     ;setup time
                             r0 in interrupt mode
0063 D2AF             40                     setb EA
0065 D2A9             41                     setb ET0
0067 758C00           42                     mov TH0, #0H
006A 758A00           43                     mov TL0, #0H
006D D28C             44                     setb TR0                                                ;start counting
006F                  45                     waitup:
006F 3090FD           46                             jnb P1.0, waitup                        ;wait until the switch is p
                             ressed
0072                  47                     waspressed:
0072 C28C             48                             clr TR0
0074 C294             49                             clr P1.4                                        ;turnoff LED
A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     2

0076 A98C             50                             mov r1, TH0
0078 AA8A             51                             mov r2, TL0
007A 11FC             52                             call convert_to_ms
007C 7482             53                             mov a,#82H                                      ;put cursor on firs
                             t row, fifth column
007E 513D             54                             call lcd_command                        ;send command to LCD
0080 516B             55                             call delay
0082 900318           56                             mov dptr,#my_string3            
0085 515D             57                             call lcd_sendstring             ;call text strings sending routine
0087 516B             58                             call delay
0089 74C0             59                             mov a,#0C0H                                     ;Put cursor on seco
                             nd row,third column
008B 513D             60                             call lcd_command
008D 516B             61                             call delay
008F 856031           62                             mov 31H, 60H
0092 11CA             63                             call ascii_finder
0094 E564             64                             mov a,64H
0096 514C             65                             acall lcd_senddata
0098 856131           66                             mov 31H, 61H
009B 11CA             67                             call ascii_finder
009D E564             68                             mov a,64H
009F 514C             69                             acall lcd_senddata
00A1 856231           70                             mov 31H, 62H
00A4 11CA             71                             call ascii_finder
00A6 E564             72                             mov a,64H
00A8 514C             73                             acall lcd_senddata
00AA 856331           74                             mov 31H, 63H
00AD 11CA             75                             call ascii_finder
00AF E564             76                             mov a,64H
00B1 514C             77                             acall lcd_senddata
00B3 900326           78                             mov dptr,#my_string4
00B6 515D             79                             call lcd_sendstring             ;call text strings sending routine
00B8 516B             80                             call delay
00BA C2AF             81                             clr EA                                          ;remove interrupt m
                             ode from timer0
00BC C2A9             82                             clr ET0
00BE 11E5             83                             call delay_1s
00C0 11E5             84                             call delay_1s
00C2 11E5             85                             call delay_1s
00C4 11E5             86                             call delay_1s
00C6 11E5             87                             call delay_1s
00C8 0136             88                             jmp forever
                      89     
00CA                  90     ascii_finder:
00CA C001             91             push 1
00CC A931             92             mov r1, 31H
00CE E9               93             mov a, r1
00CF 11D6             94             call check_the_val
00D1 F564             95             mov 64H, a; move the accumulator to 61H
00D3 D001             96             pop 1
00D5 22               97             ret
                      98     
00D6                  99     check_the_val:
00D6 2430            100                     add a,#30H
00D8 22              101                     ret
                     102     
00D9                 103     timer_jump:
00D9 08              104             inc R0                          ;the timer has overflown so increment R0
00DA 758C00          105             mov TH0,#0H
00DD 758A00          106             mov TL0,#0H
00E0 D28C            107             setb TR0
00E2 D2A9            108             setb ET0
00E4 32              109             reti
                     110             
00E5                 111     delay_1s:                               ;timer will take 40*25ms = 1s
00E5 7A28            112             mov r2, #40
A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     3

00E7                 113             repeat:
00E7 11EC            114                     call delay_25ms
00E9 DAFC            115                     djnz r2, repeat
00EB 22              116                     ret
                     117     
00EC                 118     delay_25ms:                             ;timer will take 50k/2MHz = 25,000us = 25ms
00EC 758C3C          119             mov TH0, #3CH           ;move the values to TH, TL register 
00EF 758AB0          120             mov TL0, #0B0H          ;to set TH,TL = -C350 (hex) - 50000 states
00F2 D28C            121             setb TR0                        ;setup timer
00F4                 122             loopsie:                                ;polling
00F4 208D02          123                     jb TF0, myexit  ;exit if flag bit is 1
00F7 80FB            124                     jmp loopsie
00F9                 125             myexit:
00F9 C28D            126                     clr TF0                 ;clear flag bit
00FB 22              127                     ret
                     128     
00FC                 129     convert_to_ms:  
00FC E8              130             mov a, r0
00FD 75F021          131             mov b, #21H                     ;for overflows, timer will take 65,535/2MHz = 32767
                             us ~ 33ms = 22H
0100 A4              132             mul ab
0101 F551            133             mov 51H, a
0103 85F050          134             mov 50H, b
0106 A950            135             mov r1, 50H
0108 A851            136             mov r0, 51H
010A 7B00            137             mov r3,#00H
010C 7C0A            138             mov r4,#0AH
010E 312B            139             call UDIV16
0110 8A63            140             mov 63H,r2
0112 7B00            141             mov r3,#00H
0114 7C0A            142             mov r4,#0AH
0116 312B            143             call UDIV16
0118 8A62            144             mov 62H,r2
011A 7B00            145             mov r3,#00H
011C 7C0A            146             mov r4,#0AH
011E 312B            147             call UDIV16
0120 8A61            148             mov 61H,r2
0122 7B00            149             mov r3,#00H
0124 7C0A            150             mov r4,#0AH
0126 312B            151             call UDIV16
0128 8A60            152             mov 60H,r2
012A 22              153             ret
                     154             
                     155     ;====================================================================
                     156     ; subroutine UDIV16
                     157     ; 16-Bit / 16-Bit to 16-Bit Quotient & Remainder Unsigned Divide
                     158     ;
                     159     ; input:    r1, r0 = Dividend X
                     160     ;           r3, r2 = Divisor Y
                     161     ;
                     162     ; output:   r1, r0 = quotient Q of division Q = X / Y
                     163     ;           r3, r2 = remainder 
                     164     ;
                     165     ; alters:   acc, B, dpl, dph, r4, r5, r6, r7, flags
                     166     ;====================================================================
                     167     
012B 7F00            168     UDIV16:        mov     r7, #0          ; clear partial remainder
012D 7E00            169                    mov     r6, #0
012F 75F010          170                    mov     B, #16          ; set loop count
                     171     
0132 C3              172     div_loop:      clr     C               ; clear carry flag
0133 E8              173                    mov     a, r0           ; shift the highest bit of
0134 33              174                    rlc     a               ; the dividend into...
0135 F8              175                    mov     r0, a
0136 E9              176                    mov     a, r1
0137 33              177                    rlc     a
A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     4

0138 F9              178                    mov     r1, a
0139 EE              179                    mov     a, r6           ; ... the lowest bit of the
013A 33              180                    rlc     a               ; partial remainder
013B FE              181                    mov     r6, a
013C EF              182                    mov     a, r7
013D 33              183                    rlc     a
013E FF              184                    mov     r7, a
013F EE              185                    mov     a, r6           ; trial subtract divisor
0140 C3              186                    clr     C               ; from partial remainder
0141 9A              187                    subb    a, r2
0142 F582            188                    mov     dpl, a
0144 EF              189                    mov     a, r7
0145 9B              190                    subb    a, r3
0146 F583            191                    mov     dph, a
0148 B3              192                    cpl     C               ; complement external borrow
0149 5004            193                    jnc     div_1           ; update partial remainder if
                     194                                            ; borrow
014B AF83            195                    mov     r7, dph         ; update partial remainder
014D AE82            196                    mov     r6, dpl
014F EC              197     div_1:         mov     a, r4           ; shift result bit into partial
0150 33              198                    rlc     a               ; quotient
0151 FC              199                    mov     r4, a
0152 ED              200                    mov     a, r5
0153 33              201                    rlc     a
0154 FD              202                    mov     r5, a
0155 D5F0DA          203                    djnz    B, div_loop
0158 ED              204                    mov     a, r5           ; put quotient in r0, and r1
0159 F9              205                    mov     r1, a
015A EC              206                    mov     a, r4
015B F8              207                    mov     r0, a
015C EF              208                    mov     a, r7           ; get remainder, saved before the
015D FB              209                    mov     r3, a           ; last subtraction
015E EE              210                    mov     a, r6
015F FA              211                    mov     r2, a
0160 22              212                    ret
                     213     
0161                 214     subtract:                               ;subroutine to perform subtraction of a 16 bit numb
                             er from FFFFH 
0161 C000            215             push 0
0163 C001            216             push 1
0165 A840            217             mov r0, 40H
0167 A941            218             mov r1, 41H
0169 74FF            219             mov a, #0FFH
016B 98              220             subb a, r0
016C F542            221             mov 42H, a
016E 7400            222             mov a, #00H
0170 99              223             subb a, r1
0171 F543            224             mov 43H, a
0173 D001            225             pop 1
0175 D000            226             pop 0
0177 22              227             ret
                     228                     
0200                 229     org 200H
                     230     ;------------------------LCD Initialisation routine----------------------------------------
                             ------------
0200                 231     lcd_init:
0200 75A038          232              mov   LCD_data,#38H  ;Function set: 2 Line, 8-bit, 5x7 dots
0203 C280            233              clr   LCD_rs         ;Selected command register
0205 C281            234              clr   LCD_rw         ;We are writing in instruction register
0207 D282            235              setb  LCD_en         ;Enable H->L
0209 516B            236                      acall delay
020B C282            237              clr   LCD_en
020D 516B            238                  acall delay
                     239     
020F 75A00C          240              mov   LCD_data,#0CH  ;Display on, Curson off
0212 C280            241              clr   LCD_rs         ;Selected instruction register
A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     5

0214 C281            242              clr   LCD_rw         ;We are writing in instruction register
0216 D282            243              setb  LCD_en         ;Enable H->L
0218 516B            244                      acall delay
021A C282            245              clr   LCD_en
                     246              
021C 516B            247                      acall delay
021E 75A001          248              mov   LCD_data,#01H  ;Clear LCD
0221 C280            249              clr   LCD_rs         ;Selected command register
0223 C281            250              clr   LCD_rw         ;We are writing in instruction register
0225 D282            251              setb  LCD_en         ;Enable H->L
0227 516B            252                      acall delay
0229 C282            253              clr   LCD_en
                     254              
022B 516B            255                      acall delay
                     256     
022D 75A006          257              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift
0230 C280            258              clr   LCD_rs         ;Selected command register
0232 C281            259              clr   LCD_rw         ;We are writing in instruction register
0234 D282            260              setb  LCD_en         ;Enable H->L
0236 516B            261                      acall delay
0238 C282            262              clr   LCD_en
                     263     
023A 516B            264                      acall delay
                     265              
023C 22              266              ret                  ;Return from routine
                     267     ;-----------------------command sending routine-------------------------------------
023D                 268      lcd_command:
023D F5A0            269              mov   LCD_data,A     ;Move the command to LCD port
023F C280            270              clr   LCD_rs         ;Selected command register
0241 C281            271              clr   LCD_rw         ;We are writing in instruction register
0243 D282            272              setb  LCD_en         ;Enable H->L
0245 516B            273                      acall delay
0247 C282            274              clr   LCD_en
0249 516B            275                      acall delay
                     276         
024B 22              277              ret  
                     278     ;-----------------------data sending routine-------------------------------------          
                                       
024C                 279      lcd_senddata:
024C F5A0            280              mov   LCD_data,A     ;Move the command to LCD port
024E D280            281              setb  LCD_rs         ;Selected data register
0250 C281            282              clr   LCD_rw         ;We are writing
0252 D282            283              setb  LCD_en         ;Enable H->L
0254 516B            284                      acall delay
0256 C282            285              clr   LCD_en
0258 516B            286              acall delay
025A 516B            287                      acall delay
025C 22              288              ret                  ;Return from busy routine
                     289     
                     290     ;-----------------------text strings sending routine-------------------------------------
025D                 291     lcd_sendstring:
025D C0E0            292             push 0e0h
025F                 293             lcd_sendstring_loop:
025F E4              294                      clr   a                                        ;clear Accumulator for any 
                             previous data
0260 93              295                      movc  a,@a+dptr                        ;load the first character in accumu
                             lator
0261 6005            296                      jz    exit                             ;go to exit if zero
0263 514C            297                      acall lcd_senddata                     ;send first char
0265 A3              298                      inc   dptr                             ;increment data pointer
0266 80F7            299                      sjmp  LCD_sendstring_loop      ;jump back to send the next character
0268 D0E0            300     exit:    pop 0e0h
026A 22              301              ret                                            ;End of routine
                     302     
                     303     ;----------------------delay routine-----------------------------------------------------
026B C000            304     delay:   push 0
A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     6

026D C001            305              push 1
026F 7801            306              mov r0,#1
0271 79FF            307     loop2:   mov r1,#255
0273 D9FE            308              loop1:  djnz r1, loop1
0275 D8FA            309              djnz r0, loop2
0277 D001            310              pop 1
0279 D000            311              pop 0 
027B 22              312              ret
                     313     ;--------------------------------------------------------
0300                 314     org 300H
0300                 315     my_string1:
0300 546F6767        316     DB   "Toggle SW1", 00H
0304 6C652053                
0308 573100                  
                     317             
030B                 318     my_string2:
030B 6966204C        319     DB   "if LED glows", 00H
030F 45442067                
0313 6C6F7773                
0317 00                      
                     320             
0318                 321     my_string3:
0318 52656163        322     DB   "Reaction Time", 00H       
031C 74696F6E                
0320 2054696D                
0324 6500                    
                     323     
0326                 324     my_string4:
0326 206D696C        325     DB      " milliseconds", 00H    
032A 6C697365                
032E 636F6E64                
0332 7300                    
                     326             
                     327     end     
                             
                                     
A51 MACRO ASSEMBLER  Q1                                                                   03/12/2022 01:06:36 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

ASCII_FINDER. . . .  C ADDR   00CAH   A   
B . . . . . . . . .  D ADDR   00F0H   A   
CHECK_THE_VAL . . .  C ADDR   00D6H   A   
CONVERT_TO_MS . . .  C ADDR   00FCH   A   
DELAY . . . . . . .  C ADDR   026BH   A   
DELAY_1S. . . . . .  C ADDR   00E5H   A   
DELAY_25MS. . . . .  C ADDR   00ECH   A   
DIV_1 . . . . . . .  C ADDR   014FH   A   
DIV_LOOP. . . . . .  C ADDR   0132H   A   
DPH . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . .  D ADDR   0082H   A   
EA. . . . . . . . .  B ADDR   00A8H.7 A   
ET0 . . . . . . . .  B ADDR   00A8H.1 A   
EXIT. . . . . . . .  C ADDR   0268H   A   
FOREVER . . . . . .  C ADDR   0036H   A   
LCD_COMMAND . . . .  C ADDR   023DH   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   0200H   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   024CH   A   
LCD_SENDSTRING. . .  C ADDR   025DH   A   
LCD_SENDSTRING_LOOP  C ADDR   025FH   A   
LOOP1 . . . . . . .  C ADDR   0273H   A   
LOOP2 . . . . . . .  C ADDR   0271H   A   
LOOPSIE . . . . . .  C ADDR   00F4H   A   
MAIN. . . . . . . .  C ADDR   0030H   A   
MYEXIT. . . . . . .  C ADDR   00F9H   A   
MY_STRING1. . . . .  C ADDR   0300H   A   
MY_STRING2. . . . .  C ADDR   030BH   A   
MY_STRING3. . . . .  C ADDR   0318H   A   
MY_STRING4. . . . .  C ADDR   0326H   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
REPEAT. . . . . . .  C ADDR   00E7H   A   
SUBTRACT. . . . . .  C ADDR   0161H   A   
TF0 . . . . . . . .  B ADDR   0088H.5 A   
TH0 . . . . . . . .  D ADDR   008CH   A   
TIMER_JUMP. . . . .  C ADDR   00D9H   A   
TL0 . . . . . . . .  D ADDR   008AH   A   
TMOD. . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . .  B ADDR   0088H.4 A   
UDIV16. . . . . . .  C ADDR   012BH   A   
WAITUP. . . . . . .  C ADDR   006FH   A   
WASPRESSED. . . . .  C ADDR   0072H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
