A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\switches.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE switches.a51 SET(SMALL) DEBUG PRINT(.\Listings\switches.lst) OBJECT(.\O
                      bjects\switches.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; This subroutine writes characters on the LCD
  00A0                 2     LCD_data equ P2    ;LCD Data port
  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select
  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write
  0082                 5     LCD_en   equ P0.2  ;LCD Enable
                       6     
0000                   7     org 0H
0000 020030            8     ljmp main
                       9     
0030                  10     org 030H        
0030                  11     main:
0030 75A000           12             mov P2,#00h
0033 759000           13             mov P1,#00h
                      14             ;initial delay for lcd power up
                      15             ;here1:setb p1.0
0036 516B             16             acall delay
                      17             ;clr p1.0
0038 516B             18             acall delay
                      19             ;sjmp here1
003A 5100             20             acall lcd_init ;initialise LCD
003C 516B             21             acall delay
003E 516B             22             acall delay
0040 516B             23             acall delay
0042 020045           24             ljmp statezero
                      25     
0045                  26     statezero:
0045 7482             27             mov a,#82h               ;Put cursor on first row,2 column
0047 513D             28             acall lcd_command        ;send command to LCD
0049 516B             29             acall delay
004B 900300           30             mov   dptr,#my_string1   ;Load DPTR with sring1 Addr
004E 515D             31             acall lcd_sendstring       ;call text strings sending routine
0050 516B             32             acall delay
0052 74C4             33             mov a,#0C4h               ;Put cursor on second row,4 column
0054 513D             34             acall lcd_command
0056 516B             35             acall delay
0058 90030D           36             mov   dptr,#my_string2
005B 515D             37             acall lcd_sendstring
005D D294             38             setb P1.4
005F D295             39             setb P1.5
0061 D296             40             setb P1.6
0063 D297             41             setb P1.7
0065 316E             42             call delay_1s
0067 02006A           43             ljmp stateonetofour
                      44     
006A                  45     stateonetofour:
                      46             ;set up lcd
006A 7482             47             mov a,#82h               ;Put cursor on first row,2 column
006C 513D             48             acall lcd_command        ;send command to LCD
006E 516B             49             acall delay
0070 900318           50             mov   dptr,#my_string3   ;Load DPTR with sring1 Addr
0073 515D             51             acall lcd_sendstring       ;call text strings sending routine
0075 516B             52             acall delay
0077 74C4             53             mov a,#0C4h               ;Put cursor on second row,4 column
0079 513D             54             acall lcd_command
007B 516B             55             acall delay
007D 90030D           56             mov   dptr,#my_string2
0080 515D             57             acall lcd_sendstring
A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     2

                      58             ;state 1
0082 C294             59             clr P1.4
0084 C295             60             clr P1.5
0086 C296             61             clr P1.6
0088 D297             62             setb P1.7
008A 316E             63             call delay_1s
008C 316E             64             call delay_1s
008E 7400             65             mov a,#0H
0090 3121             66             call read_from_pins
                      67             ;state 2
0092 C294             68             clr P1.4
0094 C295             69             clr P1.5
0096 D296             70             setb P1.6
0098 C297             71             clr P1.7
009A 316E             72             call delay_1s
009C 316E             73             call delay_1s
009E C4               74             swap a
009F 3121             75             call read_from_pins
00A1 F530             76             mov 30H,a
                      77             ;state 3
00A3 C294             78             clr P1.4
00A5 D295             79             setb P1.5
00A7 C296             80             clr P1.6
00A9 C297             81             clr P1.7
00AB 316E             82             call delay_1s
00AD 316E             83             call delay_1s
00AF 7400             84             mov a,#0H
00B1 3121             85             call read_from_pins
                      86             ;state 4
00B3 D294             87             setb P1.4
00B5 C295             88             clr P1.5
00B7 C296             89             clr P1.6
00B9 C297             90             clr P1.7
00BB 316E             91             call delay_1s
00BD 316E             92             call delay_1s
00BF C4               93             swap a
00C0 3121             94             call read_from_pins
00C2 F531             95             mov 31H,a
00C4 0200C7           96             ljmp statefive
                      97     
00C7                  98     statefive:
00C7 C294             99             clr P1.4
00C9 C295            100             clr P1.5
00CB C296            101             clr P1.6
00CD C297            102             clr P1.7
00CF 3136            103             call ascii_finder_one
00D1 314B            104             call ascii_finder_two
00D3 7481            105             mov a,#81h               ;Put cursor on first row,2 column
00D5 513D            106             acall lcd_command        ;send command to LCD
00D7 516B            107             acall delay
00D9 900337          108             mov   dptr,#my_string5   ;Load DPTR with sring1 Addr
00DC 515D            109             acall lcd_sendstring       ;call text strings sending routine
00DE 516B            110             acall delay
00E0 74C1            111             mov a,#0C1h               ;Put cursor on second row,4 column
00E2 513D            112             acall lcd_command
00E4 516B            113             acall delay
00E6 900327          114             mov   dptr,#my_string4
00E9 515D            115             acall lcd_sendstring
00EB 316E            116             call delay_1s
00ED 316E            117             call delay_1s
00EF E530            118             mov a, 30H
00F1 8531F0          119             mov b, 31H
00F4 A4              120             mul ab
00F5 85F050          121             mov 50H, b
00F8 F551            122             mov 51H, a
00FA 85F030          123             mov 30H, b
A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     3

00FD F531            124             mov 31H, a
00FF 3136            125             call ascii_finder_one
0101 314B            126             call ascii_finder_two
0103 7481            127             mov a,#81h               ;Put cursor on first row,2 column
0105 513D            128             acall lcd_command        ;send command to LCD
0107 516B            129             acall delay
0109 900348          130             mov   dptr,#my_string6   ;Load DPTR with sring1 Addr
010C 515D            131             acall lcd_sendstring       ;call text strings sending routine
010E 516B            132             acall delay
0110 74C1            133             mov a,#0C1h               ;Put cursor on second row,4 column
0112 513D            134             acall lcd_command
0114 516B            135             acall delay
0116 900327          136             mov   dptr,#my_string4
0119 515D            137             acall lcd_sendstring
011B 02011E          138             ljmp here
011E 02011E          139             here: ljmp here
                     140             
                     141     
0121                 142     read_from_pins:
                     143             ; msb P1.3 and lsb P1.0
0121 309002          144             jnb P1.0, next1
0124 2401            145             add a,#1H
0126                 146             next1:
0126 309102          147             jnb P1.1, next2
0129 2402            148             add a,#2H
012B                 149             next2:
012B 309202          150             jnb P1.2, next3
012E 2404            151             add a,#4H
0130                 152             next3:
0130 309302          153             jnb P1.3, next4
0133 2408            154             add a,#8H
0135                 155             next4:
0135 22              156             ret
                     157             
0136                 158     ascii_finder_one:
0136 A930            159             mov r1, 30H; the number
0138 E9              160             mov a, r1
0139 75F010          161             mov b, #10H
013C 84              162             div ab; divide by 10H to get both digits 
013D FA              163             mov r2, a; the first digit
013E ABF0            164             mov r3, b; the second digit
0140 EA              165             mov a, r2
0141 3160            166             call check_the_val
0143 F560            167             mov 60H, a; move the accumulator to 60H
0145 EB              168             mov a, r3
0146 3160            169             call check_the_val
0148 F561            170             mov 61H, a; move the accumulator to 61H
014A 22              171             ret
                     172     
014B                 173     ascii_finder_two:
014B A931            174             mov r1, 31H; the number
014D E9              175             mov a, r1
014E 75F010          176             mov b, #10H
0151 84              177             div ab; divide by 10H to get both digits 
0152 FA              178             mov r2, a; the first digit
0153 ABF0            179             mov r3, b; the second digit
0155 EA              180             mov a, r2
0156 3160            181             call check_the_val
0158 F562            182             mov 62H, a; move the accumulator to 60H
015A EB              183             mov a, r3
015B 3160            184             call check_the_val
015D F563            185             mov 63H, a; move the accumulator to 61H
015F 22              186             ret
                     187     
0160                 188     check_the_val:
0160 B40903          189                     cjne a,#9H,unequal; check if equal to 9
A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     4

0163 2430            190                     add a,#30H
0165 22              191                     ret
0166                 192                     unequal:
0166 4003            193                             jc smaller; check if smaller than 9
                     194                             ;greater than 9 case
                     195                             ;add 37H to get ASCII for A-F
0168 2437            196                             add a, #37H
016A 22              197                             ret
016B                 198                             smaller:
                     199                                     ;add 30H to get ASCII for 0-9
016B 2430            200                                     add a, #30H
016D 22              201                                     ret
                     202     
016E                 203     delay_1s:
016E 79C8            204             mov r1,#200
0170                 205             highlight:
0170 3175            206             call delay_5ms
0172 D9FC            207             djnz r1,highlight
0174 22              208             ret
                     209     
0175                 210     delay_5ms:
0175 C000            211             push 00h
0177 7814            212             mov r0, #20
0179 3180            213             h2: acall delay_250us
017B D8FC            214             djnz r0, h2
017D D000            215             pop 00h
017F 22              216             ret
                     217             
0180                 218     delay_250us:
0180 C000            219             push 00h
0182 78F4            220             mov r0, #244
0184 D8FE            221             h1: djnz r0, h1
0186 D000            222             pop 00h
0188 22              223             ret     
                     224     
0200                 225     org 200H
                     226     ;------------------------LCD Initialisation routine----------------------------------------
                             ------------
0200                 227     lcd_init:
0200 75A038          228              mov   LCD_data,#38H  ;Function set: 2 Line, 8-bit, 5x7 dots
0203 C280            229              clr   LCD_rs         ;Selected command register
0205 C281            230              clr   LCD_rw         ;We are writing in instruction register
0207 D282            231              setb  LCD_en         ;Enable H->L
0209 516B            232                      acall delay
020B C282            233              clr   LCD_en
020D 516B            234                  acall delay
                     235     
020F 75A00C          236              mov   LCD_data,#0CH  ;Display on, Curson off
0212 C280            237              clr   LCD_rs         ;Selected instruction register
0214 C281            238              clr   LCD_rw         ;We are writing in instruction register
0216 D282            239              setb  LCD_en         ;Enable H->L
0218 516B            240                      acall delay
021A C282            241              clr   LCD_en
                     242              
021C 516B            243                      acall delay
021E 75A001          244              mov   LCD_data,#01H  ;Clear LCD
0221 C280            245              clr   LCD_rs         ;Selected command register
0223 C281            246              clr   LCD_rw         ;We are writing in instruction register
0225 D282            247              setb  LCD_en         ;Enable H->L
0227 516B            248                      acall delay
0229 C282            249              clr   LCD_en
                     250              
022B 516B            251                      acall delay
                     252     
022D 75A006          253              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift
0230 C280            254              clr   LCD_rs         ;Selected command register
A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     5

0232 C281            255              clr   LCD_rw         ;We are writing in instruction register
0234 D282            256              setb  LCD_en         ;Enable H->L
0236 516B            257                      acall delay
0238 C282            258              clr   LCD_en
                     259     
023A 516B            260                      acall delay
                     261              
023C 22              262              ret                  ;Return from routine
                     263     ;-----------------------command sending routine-------------------------------------
023D                 264      lcd_command:
023D F5A0            265              mov   LCD_data,A     ;Move the command to LCD port
023F C280            266              clr   LCD_rs         ;Selected command register
0241 C281            267              clr   LCD_rw         ;We are writing in instruction register
0243 D282            268              setb  LCD_en         ;Enable H->L
0245 516B            269                      acall delay
0247 C282            270              clr   LCD_en
0249 516B            271                      acall delay
                     272         
024B 22              273              ret  
                     274     ;-----------------------data sending routine-------------------------------------          
                                       
024C                 275      lcd_senddata:
024C F5A0            276              mov   LCD_data,A     ;Move the command to LCD port
024E D280            277              setb  LCD_rs         ;Selected data register
0250 C281            278              clr   LCD_rw         ;We are writing
0252 D282            279              setb  LCD_en         ;Enable H->L
0254 516B            280                      acall delay
0256 C282            281              clr   LCD_en
0258 516B            282              acall delay
025A 516B            283                      acall delay
025C 22              284              ret                  ;Return from busy routine
                     285     
                     286     ;-----------------------text strings sending routine-------------------------------------
025D                 287     lcd_sendstring:
025D C0E0            288             push 0e0h
025F                 289             lcd_sendstring_loop:
025F E4              290                      clr   a                 ;clear Accumulator for any previous data
0260 93              291                      movc  a,@a+dptr         ;load the first character in accumulator
0261 6005            292                      jz    exit              ;go to exit if zero
0263 514C            293                      acall lcd_senddata      ;send first char
0265 A3              294                      inc   dptr              ;increment data pointer
0266 80F7            295                      sjmp  LCD_sendstring_loop    ;jump back to send the next character
0268 D0E0            296     exit:    pop 0e0h
026A 22              297              ret                     ;End of routine
                     298     
                     299     ;----------------------delay routine-----------------------------------------------------
026B C000            300     delay:   push 0
026D C001            301              push 1
026F 7801            302              mov r0,#1
0271 79FF            303     loop2:   mov r1,#255
0273 D9FE            304              loop1:  djnz r1, loop1
0275 D8FA            305              djnz r0, loop2
0277 D001            306              pop 1
0279 D000            307              pop 0 
027B 22              308              ret
                     309     ;--------------------------------------------------------
0300                 310     org 300H
0300                 311     my_string1:
0300 456E7465        312                      DB   "Enter Inputs", 00H
0304 7220496E                
0308 70757473                
030C 00                      
030D                 313     my_string2:
030D 45453333        314              DB   "EE337-2022", 00H
0311 372D3230                
0315 323200                  
A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     6

0318                 315     my_string3:
0318 52656164        316                      DB   "Reading Inputs", 00H
031C 696E6720                
0320 496E7075                
0324 747300                  
0327                 317     my_string4:
0327 4E756D31        318                      DB   "Num1:",60H,61H,", Num2:",62H,63H
032B 3A60612C                
032F 204E756D                
0333 323A6263                
0337                 319     my_string5:
0337 436F6D70        320                      DB   "Computing Result", 00H
033B 7574696E                
033F 67205265                
0343 73756C74                
0347 00                      
0348                 321     my_string6:
0348 52657375        322                      DB   "Result = ",60H,61H,62H,63H
034C 6C74203D                
0350 20606162                
0354 63                      
                     323     
                     324     end
                             
A51 MACRO ASSEMBLER  SWITCHES                                                             02/13/2022 03:04:56 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

ASCII_FINDER_ONE. .  C ADDR   0136H   A   
ASCII_FINDER_TWO. .  C ADDR   014BH   A   
B . . . . . . . . .  D ADDR   00F0H   A   
CHECK_THE_VAL . . .  C ADDR   0160H   A   
DELAY . . . . . . .  C ADDR   026BH   A   
DELAY_1S. . . . . .  C ADDR   016EH   A   
DELAY_250US . . . .  C ADDR   0180H   A   
DELAY_5MS . . . . .  C ADDR   0175H   A   
EXIT. . . . . . . .  C ADDR   0268H   A   
H1. . . . . . . . .  C ADDR   0184H   A   
H2. . . . . . . . .  C ADDR   0179H   A   
HERE. . . . . . . .  C ADDR   011EH   A   
HIGHLIGHT . . . . .  C ADDR   0170H   A   
LCD_COMMAND . . . .  C ADDR   023DH   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   0200H   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   024CH   A   
LCD_SENDSTRING. . .  C ADDR   025DH   A   
LCD_SENDSTRING_LOOP  C ADDR   025FH   A   
LOOP1 . . . . . . .  C ADDR   0273H   A   
LOOP2 . . . . . . .  C ADDR   0271H   A   
MAIN. . . . . . . .  C ADDR   0030H   A   
MY_STRING1. . . . .  C ADDR   0300H   A   
MY_STRING2. . . . .  C ADDR   030DH   A   
MY_STRING3. . . . .  C ADDR   0318H   A   
MY_STRING4. . . . .  C ADDR   0327H   A   
MY_STRING5. . . . .  C ADDR   0337H   A   
MY_STRING6. . . . .  C ADDR   0348H   A   
NEXT1 . . . . . . .  C ADDR   0126H   A   
NEXT2 . . . . . . .  C ADDR   012BH   A   
NEXT3 . . . . . . .  C ADDR   0130H   A   
NEXT4 . . . . . . .  C ADDR   0135H   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
READ_FROM_PINS. . .  C ADDR   0121H   A   
SMALLER . . . . . .  C ADDR   016BH   A   
STATEFIVE . . . . .  C ADDR   00C7H   A   
STATEONETOFOUR. . .  C ADDR   006AH   A   
STATEZERO . . . . .  C ADDR   0045H   A   
UNEQUAL . . . . . .  C ADDR   0166H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
