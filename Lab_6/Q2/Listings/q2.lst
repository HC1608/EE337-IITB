A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\q2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE q2.a51 SET(SMALL) DEBUG PRINT(.\Listings\q2.lst) OBJECT(.\Objects\q2.ob
                      j) EP

LOC  OBJ            LINE     SOURCE

                       1     ; This subroutine writes characters on the LCD
  00A0                 2     LCD_data equ P2    ;LCD Data port
  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select
  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write
  0082                 5     LCD_en   equ P0.2  ;LCD Enable
                       6     
0000                   7     org 0H
0000 802E              8     jmp main
0030                   9     org 30H
                      10             
0030                  11     main:
0030 758901           12             mov TMOD, #01H          ;set timer0 in mode 1
0033 759000           13             mov P1, #00H            ;configure as output
0036 7540C3           14             mov 40H, #0C3H          ;to set TH,TL = C350 (hex) = 50000 (dec)
0039 754150           15             mov 41H, #50H           
003C 757023           16             mov 70H, #23H
003F 757145           17             mov 71H, #45H
0042 31BB             18             call subtract           ;load 2s complement into 42H and 43H
                      19                                                     ;initial delay for lcd power up
0044 516B             20             call delay
0046 516B             21             call delay
0048 5100             22             call lcd_init           ;initialise LCD
004A 516B             23             call delay
004C 516B             24             call delay
004E 516B             25             call delay
                      26             
0050                  27             forever:                        ;primary subroutine for q2
0050                  28                     level1:
0050 E570             29                             mov a,70H
0052 540F             30                             anl a, #0FH
0054 FF               31                             mov r7, a
0055 C4               32                             swap a
0056 F590             33                             mov P1, a
0058 C4               34                             swap a
0059 3138             35                             call bin_converter
005B 316D             36                             call ascii_finder
005D 7485             37                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
005F 513D             38                             call lcd_command                        ;send command to LCD
0061 516B             39                             call delay
0063 900300           40                             mov dptr,#my_string1            
0066 515D             41                             call lcd_sendstring             ;call text strings sending routine
0068 516B             42                             call delay
006A 74C3             43                             mov a,#0C3h               ;Put cursor on second row,4 column
006C 513D             44                             call lcd_command
006E 516B             45                             call delay
0070 900320           46                             mov dptr,#my_string5
0073 515D             47                             call lcd_sendstring             ;call text strings sending routine
0075 516B             48                             call delay
0077 E560             49                             mov a,60H
0079 514C             50                             acall lcd_senddata
007B E561             51                             mov a,61H
007D 514C             52                             acall lcd_senddata
007F E562             53                             mov a,62H
0081 514C             54                             acall lcd_senddata
0083 E563             55                             mov a,63H
0085 514C             56                             acall lcd_senddata
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     2

0087 31A4             57                             call delay_1s
0089                  58                     level2:
0089 E570             59                             mov a,70H
008B 54F0             60                             anl a, #0F0H
008D C4               61                             swap a
008E FF               62                             mov r7, a
008F C4               63                             swap a
0090 F590             64                             mov P1, a
0092 C4               65                             swap a
0093 3138             66                             call bin_converter
0095 316D             67                             call ascii_finder
0097 7485             68                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
0099 513D             69                             call lcd_command                        ;send command to LCD
009B 516B             70                             call delay
009D 900308           71                             mov dptr,#my_string2            
00A0 515D             72                             call lcd_sendstring             ;call text strings sending routine
00A2 516B             73                             call delay
00A4 74C3             74                             mov a,#0C3h               ;Put cursor on second row,4 column
00A6 513D             75                             call lcd_command
00A8 516B             76                             call delay
00AA 900320           77                             mov dptr,#my_string5
00AD 515D             78                             call lcd_sendstring             ;call text strings sending routine
00AF 516B             79                             call delay
00B1 E560             80                             mov a,60H
00B3 514C             81                             acall lcd_senddata
00B5 E561             82                             mov a,61H
00B7 514C             83                             acall lcd_senddata
00B9 E562             84                             mov a,62H
00BB 514C             85                             acall lcd_senddata
00BD E563             86                             mov a,63H
00BF 514C             87                             acall lcd_senddata
00C1 31A4             88                             call delay_1s
00C3                  89                     level3:
00C3 E571             90                             mov a,71H
00C5 540F             91                             anl a, #0FH
00C7 FF               92                             mov r7, a
00C8 C4               93                             swap a
00C9 F590             94                             mov P1, a
00CB C4               95                             swap a
00CC 3138             96                             call bin_converter
00CE 316D             97                             call ascii_finder
00D0 7485             98                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
00D2 513D             99                             call lcd_command                        ;send command to LCD
00D4 516B            100                             call delay
00D6 900310          101                             mov dptr,#my_string3            
00D9 515D            102                             call lcd_sendstring             ;call text strings sending routine
00DB 516B            103                             call delay
00DD 74C3            104                             mov a,#0C3h               ;Put cursor on second row,4 column
00DF 513D            105                             call lcd_command
00E1 516B            106                             call delay
00E3 900320          107                             mov dptr,#my_string5
00E6 515D            108                             call lcd_sendstring             ;call text strings sending routine
00E8 516B            109                             call delay
00EA E560            110                             mov a,60H
00EC 514C            111                             acall lcd_senddata
00EE E561            112                             mov a,61H
00F0 514C            113                             acall lcd_senddata
00F2 E562            114                             mov a,62H
00F4 514C            115                             acall lcd_senddata
00F6 E563            116                             mov a,63H
00F8 514C            117                             acall lcd_senddata
00FA 31A4            118                             call delay_1s
00FC                 119                     level4:
00FC E571            120                             mov a,71H
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     3

00FE 54F0            121                             anl a, #0F0H
0100 C4              122                             swap a
0101 FF              123                             mov r7, a
0102 C4              124                             swap a
0103 F590            125                             mov P1, a
0105 C4              126                             swap a
0106 3138            127                             call bin_converter
0108 316D            128                             call ascii_finder
010A 7485            129                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
010C 513D            130                             call lcd_command                        ;send command to LCD
010E 516B            131                             call delay
0110 900318          132                             mov dptr,#my_string4            
0113 515D            133                             call lcd_sendstring             ;call text strings sending routine
0115 516B            134                             call delay
0117 74C3            135                             mov a,#0C3h               ;Put cursor on second row,4 column
0119 513D            136                             call lcd_command
011B 516B            137                             call delay
011D 900320          138                             mov dptr,#my_string5
0120 515D            139                             call lcd_sendstring             ;call text strings sending routine
0122 516B            140                             call delay
0124 E560            141                             mov a,60H
0126 514C            142                             acall lcd_senddata
0128 E561            143                             mov a,61H
012A 514C            144                             acall lcd_senddata
012C E562            145                             mov a,62H
012E 514C            146                             acall lcd_senddata
0130 E563            147                             mov a,63H
0132 514C            148                             acall lcd_senddata
0134 31A4            149                             call delay_1s
0136 0150            150                     jmp forever
                     151     
0138                 152     bin_converter:
0138 EF              153             mov a, r7                                ;first bit
0139 5408            154             anl a, #08H
013B B40804          155             cjne a, #08H, skip_1
013E 7E10            156                     mov r6,#10H
0140 8002            157                     jmp post_skip_1
0142                 158             skip_1:
0142 7E00            159                     mov r6,#00H
0144                 160             post_skip_1:
0144 EF              161             mov a, r7                                ;second bit
0145 5404            162             anl a, #04H
0147 B40405          163             cjne a, #04H, skip_2
014A EE              164                     mov a,r6
014B 2401            165                     add a,#01H
014D 8001            166                     jmp post_skip_2
014F                 167             skip_2:
014F EE              168                     mov a,r6
0150                 169             post_skip_2:
0150 F531            170             mov 31H, a
0152 EF              171             mov a, r7                                ;third bit
0153 5402            172             anl a, #02H
0155 B40204          173             cjne a, #02H, skip_3
0158 7E10            174                     mov r6,#10H
015A 8002            175                     jmp post_skip_3
015C                 176             skip_3:
015C 7E00            177                     mov r6,#00H
015E                 178             post_skip_3:
015E EF              179             mov a, r7                                ;fourth bit
015F 5401            180             anl a, #01H
0161 B40105          181             cjne a, #01H, skip_4
0164 EE              182                     mov a,r6
0165 2401            183                     add a,#01H
0167 8001            184                     jmp post_skip_4
0169                 185             skip_4:
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     4

0169 EE              186                     mov a,r6
016A                 187             post_skip_4:
016A F532            188             mov 32H, a
016C 22              189             ret
                     190     
016D                 191     ascii_finder:
016D A931            192             mov r1, 31H; the first two bits
016F E9              193             mov a, r1
0170 75F010          194             mov b, #10H
0173 84              195             div ab; divide by 10H to get both digits 
0174 FA              196             mov r2, a; the first digit
0175 ABF0            197             mov r3, b; the second digit
0177 EA              198             mov a, r2
0178 3196            199             call check_the_val
017A F560            200             mov 60H, a; move the accumulator to 60H
017C EB              201             mov a, r3
017D 3196            202             call check_the_val
017F F561            203             mov 61H, a; move the accumulator to 61H
0181 A932            204             mov r1, 32H; the last two bits
0183 E9              205             mov a, r1
0184 75F010          206             mov b, #10H
0187 84              207             div ab; divide by 10H to get both digits 
0188 FA              208             mov r2, a; the first digit
0189 ABF0            209             mov r3, b; the second digit
018B EA              210             mov a, r2
018C 3196            211             call check_the_val
018E F562            212             mov 62H, a; move the accumulator to 60H
0190 EB              213             mov a, r3
0191 3196            214             call check_the_val
0193 F563            215             mov 63H, a; move the accumulator to 61H
0195 22              216             ret
                     217     
0196                 218     check_the_val:
0196 B40903          219                     cjne a,#9H,unequal; check if equal to 9
0199 2430            220                     add a,#30H
019B 22              221                     ret
019C                 222                     unequal:
019C 4003            223                             jc smaller; check if smaller than 9
                     224                             ;greater than 9 case
                     225                             ;add 37H to get ASCII for A-F
019E 2437            226                             add a, #37H
01A0 22              227                             ret
01A1                 228                             smaller:
                     229                                     ;add 30H to get ASCII for 0-9
01A1 2430            230                                     add a, #30H
01A3 22              231                                     ret
                     232     
01A4                 233     delay_1s:                               ;timer will take 40*25ms = 1s
01A4 7A28            234             mov r2, #40
01A6                 235             repeat:
01A6 31AB            236                     call delay_25ms
01A8 DAFC            237                     djnz r2, repeat
01AA 22              238                     ret
                     239     
01AB                 240     delay_25ms:                             ;timer will take 50k/2MHz = 25,000us = 25ms
01AB 85428C          241             mov TH0, 42H            ;move the values to TH, TL register 
01AE 85438A          242             mov TL0, 43H            
01B1 D28C            243             setb TR0                        ;setup timer
01B3                 244             loopsie:                                ;polling
01B3 208D02          245                     jb TF0, myexit  ;exit if flag bit is 1
01B6 80FB            246                     jmp loopsie
01B8                 247             myexit:
01B8 C28D            248                     clr TF0                 ;clear flag bit
01BA 22              249                     ret
                     250     
01BB                 251     subtract:                               ;subroutine to perform subtraction of a 16 bit numb
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     5

                             er from FFFFH 
01BB A840            252             mov r0, 40H
01BD A941            253             mov r1, 41H
01BF 74FF            254             mov a, #0FFH
01C1 98              255             subb a, r0
01C2 F542            256             mov 42H, a
01C4 7400            257             mov a, #00H
01C6 99              258             subb a, r1
01C7 F543            259             mov 43H, a
01C9 22              260             ret
                     261     
0200                 262     org 200H
                     263     ;------------------------LCD Initialisation routine----------------------------------------
                             ------------
0200                 264     lcd_init:
0200 75A038          265              mov   LCD_data,#38H  ;Function set: 2 Line, 8-bit, 5x7 dots
0203 C280            266              clr   LCD_rs         ;Selected command register
0205 C281            267              clr   LCD_rw         ;We are writing in instruction register
0207 D282            268              setb  LCD_en         ;Enable H->L
0209 516B            269                      acall delay
020B C282            270              clr   LCD_en
020D 516B            271                  acall delay
                     272     
020F 75A00C          273              mov   LCD_data,#0CH  ;Display on, Curson off
0212 C280            274              clr   LCD_rs         ;Selected instruction register
0214 C281            275              clr   LCD_rw         ;We are writing in instruction register
0216 D282            276              setb  LCD_en         ;Enable H->L
0218 516B            277                      acall delay
021A C282            278              clr   LCD_en
                     279              
021C 516B            280                      acall delay
021E 75A001          281              mov   LCD_data,#01H  ;Clear LCD
0221 C280            282              clr   LCD_rs         ;Selected command register
0223 C281            283              clr   LCD_rw         ;We are writing in instruction register
0225 D282            284              setb  LCD_en         ;Enable H->L
0227 516B            285                      acall delay
0229 C282            286              clr   LCD_en
                     287              
022B 516B            288                      acall delay
                     289     
022D 75A006          290              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift
0230 C280            291              clr   LCD_rs         ;Selected command register
0232 C281            292              clr   LCD_rw         ;We are writing in instruction register
0234 D282            293              setb  LCD_en         ;Enable H->L
0236 516B            294                      acall delay
0238 C282            295              clr   LCD_en
                     296     
023A 516B            297                      acall delay
                     298              
023C 22              299              ret                  ;Return from routine
                     300     ;-----------------------command sending routine-------------------------------------
023D                 301      lcd_command:
023D F5A0            302              mov   LCD_data,A     ;Move the command to LCD port
023F C280            303              clr   LCD_rs         ;Selected command register
0241 C281            304              clr   LCD_rw         ;We are writing in instruction register
0243 D282            305              setb  LCD_en         ;Enable H->L
0245 516B            306                      acall delay
0247 C282            307              clr   LCD_en
0249 516B            308                      acall delay
                     309         
024B 22              310              ret  
                     311     ;-----------------------data sending routine-------------------------------------          
                                       
024C                 312      lcd_senddata:
024C F5A0            313              mov   LCD_data,A     ;Move the command to LCD port
024E D280            314              setb  LCD_rs         ;Selected data register
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     6

0250 C281            315              clr   LCD_rw         ;We are writing
0252 D282            316              setb  LCD_en         ;Enable H->L
0254 516B            317                      acall delay
0256 C282            318              clr   LCD_en
0258 516B            319              acall delay
025A 516B            320                      acall delay
025C 22              321              ret                  ;Return from busy routine
                     322     
                     323     ;-----------------------text strings sending routine-------------------------------------
025D                 324     lcd_sendstring:
025D C0E0            325             push 0e0h
025F                 326             lcd_sendstring_loop:
025F E4              327                      clr   a                                        ;clear Accumulator for any 
                             previous data
0260 93              328                      movc  a,@a+dptr                        ;load the first character in accumu
                             lator
0261 6005            329                      jz    exit                             ;go to exit if zero
0263 514C            330                      acall lcd_senddata                     ;send first char
0265 A3              331                      inc   dptr                             ;increment data pointer
0266 80F7            332                      sjmp  LCD_sendstring_loop      ;jump back to send the next character
0268 D0E0            333     exit:    pop 0e0h
026A 22              334              ret                                            ;End of routine
                     335     
                     336     ;----------------------delay routine-----------------------------------------------------
026B C000            337     delay:   push 0
026D C001            338              push 1
026F 7801            339              mov r0,#1
0271 79FF            340     loop2:   mov r1,#255
0273 D9FE            341              loop1:  djnz r1, loop1
0275 D8FA            342              djnz r0, loop2
0277 D001            343              pop 1
0279 D000            344              pop 0 
027B 22              345              ret
                     346     ;--------------------------------------------------------
0300                 347     org 300H
0300                 348     my_string1:
0300 4C657665        349                      DB   "Level 1",00H
0304 6C203100                
                     350     
0308                 351     my_string2:
0308 4C657665        352              DB   "Level 2",00H
030C 6C203200                
                     353     
0310                 354     my_string3:
0310 4C657665        355                      DB   "Level 3",00H
0314 6C203300                
                     356     
0318                 357     my_string4:
0318 4C657665        358                      DB   "Level 4",00H
031C 6C203400                
                     359     
0320                 360     my_string5:
0320 56616C75        361                      DB   "Value: ",00H
0324 653A2000                
                     362                              
                     363     end     
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:59:24 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

ASCII_FINDER. . . .  C ADDR   016DH   A   
B . . . . . . . . .  D ADDR   00F0H   A   
BIN_CONVERTER . . .  C ADDR   0138H   A   
CHECK_THE_VAL . . .  C ADDR   0196H   A   
DELAY . . . . . . .  C ADDR   026BH   A   
DELAY_1S. . . . . .  C ADDR   01A4H   A   
DELAY_25MS. . . . .  C ADDR   01ABH   A   
EXIT. . . . . . . .  C ADDR   0268H   A   
FOREVER . . . . . .  C ADDR   0050H   A   
LCD_COMMAND . . . .  C ADDR   023DH   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   0200H   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   024CH   A   
LCD_SENDSTRING. . .  C ADDR   025DH   A   
LCD_SENDSTRING_LOOP  C ADDR   025FH   A   
LEVEL1. . . . . . .  C ADDR   0050H   A   
LEVEL2. . . . . . .  C ADDR   0089H   A   
LEVEL3. . . . . . .  C ADDR   00C3H   A   
LEVEL4. . . . . . .  C ADDR   00FCH   A   
LOOP1 . . . . . . .  C ADDR   0273H   A   
LOOP2 . . . . . . .  C ADDR   0271H   A   
LOOPSIE . . . . . .  C ADDR   01B3H   A   
MAIN. . . . . . . .  C ADDR   0030H   A   
MYEXIT. . . . . . .  C ADDR   01B8H   A   
MY_STRING1. . . . .  C ADDR   0300H   A   
MY_STRING2. . . . .  C ADDR   0308H   A   
MY_STRING3. . . . .  C ADDR   0310H   A   
MY_STRING4. . . . .  C ADDR   0318H   A   
MY_STRING5. . . . .  C ADDR   0320H   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
POST_SKIP_1 . . . .  C ADDR   0144H   A   
POST_SKIP_2 . . . .  C ADDR   0150H   A   
POST_SKIP_3 . . . .  C ADDR   015EH   A   
POST_SKIP_4 . . . .  C ADDR   016AH   A   
REPEAT. . . . . . .  C ADDR   01A6H   A   
SKIP_1. . . . . . .  C ADDR   0142H   A   
SKIP_2. . . . . . .  C ADDR   014FH   A   
SKIP_3. . . . . . .  C ADDR   015CH   A   
SKIP_4. . . . . . .  C ADDR   0169H   A   
SMALLER . . . . . .  C ADDR   01A1H   A   
SUBTRACT. . . . . .  C ADDR   01BBH   A   
TF0 . . . . . . . .  B ADDR   0088H.5 A   
TH0 . . . . . . . .  D ADDR   008CH   A   
TL0 . . . . . . . .  D ADDR   008AH   A   
TMOD. . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . .  B ADDR   0088H.4 A   
UNEQUAL . . . . . .  C ADDR   019CH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
