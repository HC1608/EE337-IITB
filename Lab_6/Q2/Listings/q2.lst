A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\q2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE q2.a51 SET(SMALL) DEBUG PRINT(.\Listings\q2.lst) OBJECT(.\Objects\q2.ob
                      j) EP

LOC  OBJ            LINE     SOURCE

                       1     ; This subroutine writes characters on the LCD
  00A0                 2     LCD_data equ P2    ;LCD Data port
  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select
  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write
  0082                 5     LCD_en   equ P0.2  ;LCD Enable
                       6     
0000                   7     org 0H
0000 802E              8     jmp main
0030                   9     org 30H
                      10             
0030                  11     main:
0030 758901           12             mov TMOD, #01H          ;set timer0 in mode 1
0033 759000           13             mov P1, #00H            ;configure as output
0036 7540C3           14             mov 40H, #0C3H          ;to set TH,TL = C350 (hex) = 50000 (dec)
0039 754150           15             mov 41H, #50H           
003C 757023           16             mov 70H, #23H
003F 757145           17             mov 71H, #45H
0042 31B3             18             call subtract           ;load 2s complement into 42H and 43H
                      19                                                     ;initial delay for lcd power up
0044 516B             20             call delay
0046 516B             21             call delay
0048 5100             22             call lcd_init           ;initialise LCD
004A 516B             23             call delay
004C 516B             24             call delay
004E 516B             25             call delay
                      26             
0050                  27             forever:                        ;primary subroutine for q2
0050                  28                     level1:
0050 E570             29                             mov a,70H
0052 540F             30                             anl a, #0FH
0054 FF               31                             mov r7, a
0055 F590             32                             mov P1, a
0057 3130             33                             call bin_converter
0059 3165             34                             call ascii_finder
005B 7485             35                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
005D 513D             36                             call lcd_command                        ;send command to LCD
005F 516B             37                             call delay
0061 900300           38                             mov dptr,#my_string1            
0064 515D             39                             call lcd_sendstring             ;call text strings sending routine
0066 516B             40                             call delay
0068 74C3             41                             mov a,#0C3h               ;Put cursor on second row,4 column
006A 513D             42                             call lcd_command
006C 516B             43                             call delay
006E 900320           44                             mov dptr,#my_string5
0071 515D             45                             call lcd_sendstring             ;call text strings sending routine
0073 516B             46                             call delay
0075 E560             47                             mov a,60H
0077 514C             48                             acall lcd_senddata
0079 E561             49                             mov a,61H
007B 514C             50                             acall lcd_senddata
007D E562             51                             mov a,62H
007F 514C             52                             acall lcd_senddata
0081 E563             53                             mov a,63H
0083 514C             54                             acall lcd_senddata
0085 319C             55                             call delay_1s
0087                  56                     level2:
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     2

0087 E570             57                             mov a,70H
0089 54F0             58                             anl a, #0F0H
008B C4               59                             swap a
008C FF               60                             mov r7, a
008D F590             61                             mov P1, a
008F 3130             62                             call bin_converter
0091 3165             63                             call ascii_finder
0093 7485             64                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
0095 513D             65                             call lcd_command                        ;send command to LCD
0097 516B             66                             call delay
0099 900308           67                             mov dptr,#my_string2            
009C 515D             68                             call lcd_sendstring             ;call text strings sending routine
009E 516B             69                             call delay
00A0 74C3             70                             mov a,#0C3h               ;Put cursor on second row,4 column
00A2 513D             71                             call lcd_command
00A4 516B             72                             call delay
00A6 900320           73                             mov dptr,#my_string5
00A9 515D             74                             call lcd_sendstring             ;call text strings sending routine
00AB 516B             75                             call delay
00AD E560             76                             mov a,60H
00AF 514C             77                             acall lcd_senddata
00B1 E561             78                             mov a,61H
00B3 514C             79                             acall lcd_senddata
00B5 E562             80                             mov a,62H
00B7 514C             81                             acall lcd_senddata
00B9 E563             82                             mov a,63H
00BB 514C             83                             acall lcd_senddata
00BD 319C             84                             call delay_1s
00BF                  85                     level3:
00BF E571             86                             mov a,71H
00C1 540F             87                             anl a, #0FH
00C3 FF               88                             mov r7, a
00C4 F590             89                             mov P1, a
00C6 3130             90                             call bin_converter
00C8 3165             91                             call ascii_finder
00CA 7485             92                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
00CC 513D             93                             call lcd_command                        ;send command to LCD
00CE 516B             94                             call delay
00D0 900310           95                             mov dptr,#my_string3            
00D3 515D             96                             call lcd_sendstring             ;call text strings sending routine
00D5 516B             97                             call delay
00D7 74C3             98                             mov a,#0C3h               ;Put cursor on second row,4 column
00D9 513D             99                             call lcd_command
00DB 516B            100                             call delay
00DD 900320          101                             mov dptr,#my_string5
00E0 515D            102                             call lcd_sendstring             ;call text strings sending routine
00E2 516B            103                             call delay
00E4 E560            104                             mov a,60H
00E6 514C            105                             acall lcd_senddata
00E8 E561            106                             mov a,61H
00EA 514C            107                             acall lcd_senddata
00EC E562            108                             mov a,62H
00EE 514C            109                             acall lcd_senddata
00F0 E563            110                             mov a,63H
00F2 514C            111                             acall lcd_senddata
00F4 319C            112                             call delay_1s
00F6                 113                     level4:
00F6 E571            114                             mov a,71H
00F8 54F0            115                             anl a, #0F0H
00FA C4              116                             swap a
00FB FF              117                             mov r7, a
00FC F590            118                             mov P1, a
00FE 3130            119                             call bin_converter
0100 3165            120                             call ascii_finder
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     3

0102 7485            121                             mov a,#85h                                      ;Put cursor on firs
                             t row,2 column
0104 513D            122                             call lcd_command                        ;send command to LCD
0106 516B            123                             call delay
0108 900318          124                             mov dptr,#my_string4            
010B 515D            125                             call lcd_sendstring             ;call text strings sending routine
010D 516B            126                             call delay
010F 74C3            127                             mov a,#0C3h               ;Put cursor on second row,4 column
0111 513D            128                             call lcd_command
0113 516B            129                             call delay
0115 900320          130                             mov dptr,#my_string5
0118 515D            131                             call lcd_sendstring             ;call text strings sending routine
011A 516B            132                             call delay
011C E560            133                             mov a,60H
011E 514C            134                             acall lcd_senddata
0120 E561            135                             mov a,61H
0122 514C            136                             acall lcd_senddata
0124 E562            137                             mov a,62H
0126 514C            138                             acall lcd_senddata
0128 E563            139                             mov a,63H
012A 514C            140                             acall lcd_senddata
012C 319C            141                             call delay_1s
012E 0150            142                     jmp forever
                     143     
0130                 144     bin_converter:
0130 EF              145             mov a, r7                                ;first bit
0131 5408            146             anl a, #08H
0133 B40804          147             cjne a, #08H, skip_1
0136 7E10            148                     mov r6,#10H
0138 8002            149                     jmp post_skip_1
013A                 150             skip_1:
013A 7E00            151                     mov r6,#00H
013C                 152             post_skip_1:
013C EF              153             mov a, r7                                ;second bit
013D 5404            154             anl a, #04H
013F B40405          155             cjne a, #04H, skip_2
0142 EE              156                     mov a,r6
0143 2401            157                     add a,#01H
0145 8001            158                     jmp post_skip_2
0147                 159             skip_2:
0147 EE              160                     mov a,r6
0148                 161             post_skip_2:
0148 F531            162             mov 31H, a
014A EF              163             mov a, r7                                ;third bit
014B 5402            164             anl a, #02H
014D B40204          165             cjne a, #02H, skip_3
0150 7E10            166                     mov r6,#10H
0152 8002            167                     jmp post_skip_3
0154                 168             skip_3:
0154 7E00            169                     mov r6,#00H
0156                 170             post_skip_3:
0156 EF              171             mov a, r7                                ;fourth bit
0157 5401            172             anl a, #01H
0159 B40105          173             cjne a, #01H, skip_4
015C EE              174                     mov a,r6
015D 2401            175                     add a,#01H
015F 8001            176                     jmp post_skip_4
0161                 177             skip_4:
0161 EE              178                     mov a,r6
0162                 179             post_skip_4:
0162 F532            180             mov 32H, a
0164 22              181             ret
                     182     
0165                 183     ascii_finder:
0165 A931            184             mov r1, 31H; the first two bits
0167 E9              185             mov a, r1
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     4

0168 75F010          186             mov b, #10H
016B 84              187             div ab; divide by 10H to get both digits 
016C FA              188             mov r2, a; the first digit
016D ABF0            189             mov r3, b; the second digit
016F EA              190             mov a, r2
0170 318E            191             call check_the_val
0172 F560            192             mov 60H, a; move the accumulator to 60H
0174 EB              193             mov a, r3
0175 318E            194             call check_the_val
0177 F561            195             mov 61H, a; move the accumulator to 61H
0179 A932            196             mov r1, 32H; the last two bits
017B E9              197             mov a, r1
017C 75F010          198             mov b, #10H
017F 84              199             div ab; divide by 10H to get both digits 
0180 FA              200             mov r2, a; the first digit
0181 ABF0            201             mov r3, b; the second digit
0183 EA              202             mov a, r2
0184 318E            203             call check_the_val
0186 F562            204             mov 62H, a; move the accumulator to 60H
0188 EB              205             mov a, r3
0189 318E            206             call check_the_val
018B F563            207             mov 63H, a; move the accumulator to 61H
018D 22              208             ret
                     209     
018E                 210     check_the_val:
018E B40903          211                     cjne a,#9H,unequal; check if equal to 9
0191 2430            212                     add a,#30H
0193 22              213                     ret
0194                 214                     unequal:
0194 4003            215                             jc smaller; check if smaller than 9
                     216                             ;greater than 9 case
                     217                             ;add 37H to get ASCII for A-F
0196 2437            218                             add a, #37H
0198 22              219                             ret
0199                 220                             smaller:
                     221                                     ;add 30H to get ASCII for 0-9
0199 2430            222                                     add a, #30H
019B 22              223                                     ret
                     224     
019C                 225     delay_1s:                               ;timer will take 40*25ms = 1s
019C 7A28            226             mov r2, #40
019E                 227             repeat:
019E 31A3            228                     call delay_25ms
01A0 DAFC            229                     djnz r2, repeat
01A2 22              230                     ret
                     231     
01A3                 232     delay_25ms:                             ;timer will take 50k/2MHz = 25,000us = 25ms
01A3 85428C          233             mov TH0, 42H            ;move the values to TH, TL register 
01A6 85438A          234             mov TL0, 43H            
01A9 D28C            235             setb TR0                        ;setup timer
01AB                 236             loopsie:                                ;polling
01AB 208D02          237                     jb TF0, myexit  ;exit if flag bit is 1
01AE 80FB            238                     jmp loopsie
01B0                 239             myexit:
01B0 C28D            240                     clr TF0                 ;clear flag bit
01B2 22              241                     ret
                     242     
01B3                 243     subtract:                               ;subroutine to perform subtraction of a 16 bit numb
                             er from FFFFH 
01B3 A840            244             mov r0, 40H
01B5 A941            245             mov r1, 41H
01B7 74FF            246             mov a, #0FFH
01B9 98              247             subb a, r0
01BA F542            248             mov 42H, a
01BC 7400            249             mov a, #00H
01BE 99              250             subb a, r1
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     5

01BF F543            251             mov 43H, a
01C1 22              252             ret
                     253     
0200                 254     org 200H
                     255     ;------------------------LCD Initialisation routine----------------------------------------
                             ------------
0200                 256     lcd_init:
0200 75A038          257              mov   LCD_data,#38H  ;Function set: 2 Line, 8-bit, 5x7 dots
0203 C280            258              clr   LCD_rs         ;Selected command register
0205 C281            259              clr   LCD_rw         ;We are writing in instruction register
0207 D282            260              setb  LCD_en         ;Enable H->L
0209 516B            261                      acall delay
020B C282            262              clr   LCD_en
020D 516B            263                  acall delay
                     264     
020F 75A00C          265              mov   LCD_data,#0CH  ;Display on, Curson off
0212 C280            266              clr   LCD_rs         ;Selected instruction register
0214 C281            267              clr   LCD_rw         ;We are writing in instruction register
0216 D282            268              setb  LCD_en         ;Enable H->L
0218 516B            269                      acall delay
021A C282            270              clr   LCD_en
                     271              
021C 516B            272                      acall delay
021E 75A001          273              mov   LCD_data,#01H  ;Clear LCD
0221 C280            274              clr   LCD_rs         ;Selected command register
0223 C281            275              clr   LCD_rw         ;We are writing in instruction register
0225 D282            276              setb  LCD_en         ;Enable H->L
0227 516B            277                      acall delay
0229 C282            278              clr   LCD_en
                     279              
022B 516B            280                      acall delay
                     281     
022D 75A006          282              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift
0230 C280            283              clr   LCD_rs         ;Selected command register
0232 C281            284              clr   LCD_rw         ;We are writing in instruction register
0234 D282            285              setb  LCD_en         ;Enable H->L
0236 516B            286                      acall delay
0238 C282            287              clr   LCD_en
                     288     
023A 516B            289                      acall delay
                     290              
023C 22              291              ret                  ;Return from routine
                     292     ;-----------------------command sending routine-------------------------------------
023D                 293      lcd_command:
023D F5A0            294              mov   LCD_data,A     ;Move the command to LCD port
023F C280            295              clr   LCD_rs         ;Selected command register
0241 C281            296              clr   LCD_rw         ;We are writing in instruction register
0243 D282            297              setb  LCD_en         ;Enable H->L
0245 516B            298                      acall delay
0247 C282            299              clr   LCD_en
0249 516B            300                      acall delay
                     301         
024B 22              302              ret  
                     303     ;-----------------------data sending routine-------------------------------------          
                                       
024C                 304      lcd_senddata:
024C F5A0            305              mov   LCD_data,A     ;Move the command to LCD port
024E D280            306              setb  LCD_rs         ;Selected data register
0250 C281            307              clr   LCD_rw         ;We are writing
0252 D282            308              setb  LCD_en         ;Enable H->L
0254 516B            309                      acall delay
0256 C282            310              clr   LCD_en
0258 516B            311              acall delay
025A 516B            312                      acall delay
025C 22              313              ret                  ;Return from busy routine
                     314     
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     6

                     315     ;-----------------------text strings sending routine-------------------------------------
025D                 316     lcd_sendstring:
025D C0E0            317             push 0e0h
025F                 318             lcd_sendstring_loop:
025F E4              319                      clr   a                                        ;clear Accumulator for any 
                             previous data
0260 93              320                      movc  a,@a+dptr                        ;load the first character in accumu
                             lator
0261 6005            321                      jz    exit                             ;go to exit if zero
0263 514C            322                      acall lcd_senddata                     ;send first char
0265 A3              323                      inc   dptr                             ;increment data pointer
0266 80F7            324                      sjmp  LCD_sendstring_loop      ;jump back to send the next character
0268 D0E0            325     exit:    pop 0e0h
026A 22              326              ret                                            ;End of routine
                     327     
                     328     ;----------------------delay routine-----------------------------------------------------
026B C000            329     delay:   push 0
026D C001            330              push 1
026F 7801            331              mov r0,#1
0271 79FF            332     loop2:   mov r1,#255
0273 D9FE            333              loop1:  djnz r1, loop1
0275 D8FA            334              djnz r0, loop2
0277 D001            335              pop 1
0279 D000            336              pop 0 
027B 22              337              ret
                     338     ;--------------------------------------------------------
0300                 339     org 300H
0300                 340     my_string1:
0300 4C657665        341                      DB   "Level 1",00H
0304 6C203100                
                     342     
0308                 343     my_string2:
0308 4C657665        344              DB   "Level 2",00H
030C 6C203200                
                     345     
0310                 346     my_string3:
0310 4C657665        347                      DB   "Level 3",00H
0314 6C203300                
                     348     
0318                 349     my_string4:
0318 4C657665        350                      DB   "Level 4",00H
031C 6C203400                
                     351     
0320                 352     my_string5:
0320 56616C75        353                      DB   "Value: ",00H
0324 653A2000                
                     354                              
                     355     end     
A51 MACRO ASSEMBLER  Q2                                                                   03/03/2022 23:56:03 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

ASCII_FINDER. . . .  C ADDR   0165H   A   
B . . . . . . . . .  D ADDR   00F0H   A   
BIN_CONVERTER . . .  C ADDR   0130H   A   
CHECK_THE_VAL . . .  C ADDR   018EH   A   
DELAY . . . . . . .  C ADDR   026BH   A   
DELAY_1S. . . . . .  C ADDR   019CH   A   
DELAY_25MS. . . . .  C ADDR   01A3H   A   
EXIT. . . . . . . .  C ADDR   0268H   A   
FOREVER . . . . . .  C ADDR   0050H   A   
LCD_COMMAND . . . .  C ADDR   023DH   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   0200H   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   024CH   A   
LCD_SENDSTRING. . .  C ADDR   025DH   A   
LCD_SENDSTRING_LOOP  C ADDR   025FH   A   
LEVEL1. . . . . . .  C ADDR   0050H   A   
LEVEL2. . . . . . .  C ADDR   0087H   A   
LEVEL3. . . . . . .  C ADDR   00BFH   A   
LEVEL4. . . . . . .  C ADDR   00F6H   A   
LOOP1 . . . . . . .  C ADDR   0273H   A   
LOOP2 . . . . . . .  C ADDR   0271H   A   
LOOPSIE . . . . . .  C ADDR   01ABH   A   
MAIN. . . . . . . .  C ADDR   0030H   A   
MYEXIT. . . . . . .  C ADDR   01B0H   A   
MY_STRING1. . . . .  C ADDR   0300H   A   
MY_STRING2. . . . .  C ADDR   0308H   A   
MY_STRING3. . . . .  C ADDR   0310H   A   
MY_STRING4. . . . .  C ADDR   0318H   A   
MY_STRING5. . . . .  C ADDR   0320H   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
POST_SKIP_1 . . . .  C ADDR   013CH   A   
POST_SKIP_2 . . . .  C ADDR   0148H   A   
POST_SKIP_3 . . . .  C ADDR   0156H   A   
POST_SKIP_4 . . . .  C ADDR   0162H   A   
REPEAT. . . . . . .  C ADDR   019EH   A   
SKIP_1. . . . . . .  C ADDR   013AH   A   
SKIP_2. . . . . . .  C ADDR   0147H   A   
SKIP_3. . . . . . .  C ADDR   0154H   A   
SKIP_4. . . . . . .  C ADDR   0161H   A   
SMALLER . . . . . .  C ADDR   0199H   A   
SUBTRACT. . . . . .  C ADDR   01B3H   A   
TF0 . . . . . . . .  B ADDR   0088H.5 A   
TH0 . . . . . . . .  D ADDR   008CH   A   
TL0 . . . . . . . .  D ADDR   008AH   A   
TMOD. . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . .  B ADDR   0088H.4 A   
UNEQUAL . . . . . .  C ADDR   0194H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
